OASISFormat: 0.4
Name:        containers
Version:     0.4
Homepage:    https://github.com/c-cube/ocaml-containers
Authors:     Simon Cruanes
License:     BSD-2-clause
LicenseFile: LICENSE
Plugins:     META (0.3), DevFiles (0.3)
OCamlVersion: >= 4.00.1
BuildTools:  ocamlbuild

Synopsis:    A modular standard library focused on data structures.
Description:
    Containers is a standard library (BSD license) focused on data structures,
    combinators and iterators, without dependencies on unix. Every module is
    independent and is prefixed with 'CC' in the global namespace. Some modules
    extend the stdlib (e.g. CCList provides safe map/fold_right/append, and
    additional functions on lists).

    It also features an optional library for dealing with strings, and a `misc`
    library full of experimental ideas (not stable, not necessarily usable).

Flag "misc"
  Description:  Build the misc library, containing everything from the rotating kitchen sink to automatic banana distributors
  Default:      false

Flag "cgi"
  Description:  Build modules related to FastCGI, depending on CamlGI
  Default:      false

Flag "lwt"
  Description:  Build modules which depend on Lwt
  Default:      false

Flag "thread"
  Description:  Build modules that depend on threads
  Default:      false

Flag "bench"
  Description:  Build and run benchmarks
  Default:      false

Library "containers"
  Path:             core
  Modules:          CCVector, CCDeque, CCGen, CCSequence, CCFQueue, CCMultiMap,
                    CCMultiSet, CCBV, CCPrint, CCPersistentHashtbl, CCError,
                    CCHeap, CCList, CCOpt, CCPair, CCFun, CCHash,
                    CCKList, CCInt, CCBool, CCArray, CCOrd, CCIO,
                    CCRandom, CCKTree, CCTrie, CCString, CCHashtbl,
                    CCFlatHashtbl, CCSexp
  FindlibName:      containers

Library "containers_string"
  Path:             string
  Pack:             true
  Modules:          KMP, Levenshtein
  FindlibName:      string
  FindlibParent:    containers

Library "containers_advanced"
  Path:             advanced
  Pack:             true
  Modules:          CCLinq, CCBatch, CCCat
  FindlibName:      advanced
  FindlibParent:    containers
  BuildDepends:     containers

Library "containers_pervasives"
  Path:             pervasives
  Modules:          CCPervasives
  BuildDepends:     containers
  FindlibName:      pervasives
  FindlibParent:    containers

Library "containers_misc"
  Path:             misc
  Pack:             true
  Modules:          Cache, FHashtbl, FlatHashtbl, Hashset,
                    Heap, LazyGraph, PersistentGraph,
                    PHashtbl, SkipList, SplayTree, SplayMap, Univ,
                    Bij, PiCalculus, Bencode, RAL,
                    UnionFind, SmallSet, AbsSet, CSM,
                    ActionMan, BencodeOnDisk, TTree, PrintBox,
                    HGraph, Automaton, Conv, Bidir, Iteratee, BTree,
                    Ty, Tell, BencodeStream, RatTerm, Cause, AVL, ParseReact
  BuildDepends:     unix,containers
  FindlibName:      misc
  FindlibParent:    containers

Library "containers_thread"
  Path:             threads/
  Modules:          CCFuture
  FindlibName:      thread
  FindlibParent:    containers
  Build$:           flag(thread)
  Install$:         flag(thread)
  BuildDepends:     containers,threads
  XMETARequires:    containers,threads

Library "containers_lwt"
  Path:             lwt
  Modules:          Behavior, Lwt_automaton
  Pack:             true
  FindlibName:      lwt
  FindlibParent:    containers
  Build$:           flag(lwt) && flag(misc)
  Install$:         flag(lwt) && flag(misc)
  BuildDepends:     containers,lwt,lwt.unix,containers.misc
  XMETARequires:    containers,lwt,lwt.unix,containers.misc

Library "containers_cgi"
  Path:             cgi
  Modules:          ToWeb
  FindlibName:      cgi
  FindlibParent:    containers
  Build$:           flag(cgi)
  Install$:         flag(cgi)
  BuildDepends:     containers,CamlGI
  XMETARequires:    containers,CamlGI

Document containers
  Title:                Containers docs
  Type:                 ocamlbuild (0.3)
  BuildTools+:          ocamldoc
  Install:              true
  XOCamlbuildPath:      .
  XOCamlbuildLibraries: containers,containers.string

Document containers_misc
  Title:                Containers_misc docs
  Type:                 ocamlbuild (0.3)
  BuildTools+:          ocamldoc
  Install:              true
  XOCamlbuildPath:      .
  XOCamlbuildLibraries: containers.misc

Document containers_string
  Title:                Containers_string docs
  Type:                 ocamlbuild (0.3)
  BuildTools+:          ocamldoc
  Install:              true
  XOCamlbuildPath:      .
  XOCamlbuildLibraries: containers.string

Executable benchs
  Path:             benchs/
  Install:          false
  CompiledObject:   native
  Build$:           flag(bench)
  MainIs:           benchs.ml
  BuildDepends:     containers,containers.string,containers.misc,bench,containers.advanced

Executable bench_conv
  Path:     benchs/
  Install: false
  CompiledObject: native
  Build$: flag(bench)
  MainIs: bench_conv.ml
  BuildDepends: containers,benchmark

Executable bench_batch
  Path: benchs/
  Install: false
  CompiledObject: native
  Build$: flag(bench)
  MainIs: bench_batch.ml
  BuildDepends: containers,benchmark

Executable bench_hash
  Path: benchs/
  Install: false
  CompiledObject: native
  Build$: flag(bench) && flag(misc)
  MainIs: bench_hash.ml
  BuildDepends: containers,containers.misc

Executable test_levenshtein
  Path: tests/
  Install: false
  CompiledObject: native
  Build$: flag(tests)
  MainIs: test_levenshtein.ml
  BuildDepends: containers,qcheck,containers.string

Executable test_lwt
  Path: tests/lwt/
  Install: false
  CompiledObject: best
  Build$: flag(tests) && flag(lwt)
  MainIs: test_Behavior.ml
  BuildDepends: containers,lwt,lwt.unix,oUnit,containers.lwt

Executable test_threads
  Path: tests/lwt/
  Install: false
  CompiledObject: best
  Build$: flag(tests) && flag(thread)
  MainIs: test_Future.ml
  BuildDepends: containers,threads,oUnit,containers.lwt

Test all
  Command: make test-all
  TestTools: run_tests
  Run$: flag(tests)

Executable run_tests
  Path: tests/
  Install: false
  CompiledObject: native
  MainIs: run_tests.ml
  Build$: flag(tests) && flag(misc)
  BuildDepends: containers,oUnit,qcheck,containers.misc

Executable web_pwd
  Path: examples/cgi/
  Install: false
  MainIs: web_pwd.ml
  Build$: flag(cgi)
  BuildDepends: containers, containers.cgi, threads, CamlGI

Executable lambda
  Path: examples/
  Install: false
  MainIs: lambda.ml
  Build$: flag(misc)
  BuildDepends: containers,containers.misc

Executable id_sexp
  Path:             examples/
  Install:          false
  CompiledObject:   native
  MainIs:           id_sexp.ml
  Build$:           flag(misc)
  BuildDepends:     containers

SourceRepository head
  Type: git
  Location: https://github.com/c-cube/ocaml-containers
  Browser: https://github.com/c-cube/ocaml-containers/tree/master/src
